时间复杂度的几条基本计算规则

    基本操作，即只有常数项，认为其时间复杂度为O(1)
    顺序结构，时间复杂度按加法进行计算
    循环结构，时间复杂度按乘法进行计算
    分支结构，时间复杂度取最大值
    判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略
    在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度
    

常见时间复杂度
执行次数函数举例	阶	非正式术语
12 	O(1) 	常数阶
2n+3 	O(n) 	线性阶
3n2+2n+1 	O(n2) 	平方阶
5log2n+20 	O(logn) 	对数阶
2n+3nlog2n+19 	O(nlogn) 	nlogn阶
6n3+2n2+3n+4 	O(n3) 	立方阶
2n 	O(2n) 	指数阶

 

注意，经常将log2n（以2为底的对数）简写成logn
常见时间复杂度之间的关系

算法效率关系

所消耗的时间从小到大
O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n) < O(n!) < O(nn)


算法的五大特性

    输入: 算法具有0个或多个输入 
    输出: 算法至少有1个或多个输出 
    有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成 
    确定性：算法中的每一步都有确定的含义，不会出现二义性 
    可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完
    
    
    
    https://www.cnblogs.com/Dreamxin/p/7816265.html
