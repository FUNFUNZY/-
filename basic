关于时间：
a= datetime.datetime()
a.weekday()

--------------------------------
c=dict(zip(a,b))

.sort(reverse=True)

‘ ’。join() 将序列中的元素以指定的字符拼接接生成一个新的字符串。
语法： ‘sep’.join(seq)
参数说明：
sep：分隔符。可以为空
seq：要连接的元素序列、字符串、元组、字典

返回值
返回通过指定字符连接seq中的元素后生成的新字符串。
---------------------------------------------------------
库

from collections import Counter
1. 计数器：对字符串\列表\元祖\字典进行计数,返回一个字典类型的数据,键是元素,值是元素出现的次数
from collections import Counter
s = "hello-python-hello-world"
a = Counter(s)
print(a)
# 结果 
Counter({'-': 3, 'd': 1, 'e': 2, 'h': 3, 'l': 5, 'n': 1, 'o': 4, 'p': 1, 'r': 1, 't': 1, 'w': 1, 'y': 1})

2.elements
返回一个Counter计数后的各个元素的迭代器
for i in a.elements():
    print(i, end="")
# 结果:
hhheellllloooo---pytnwrd

3.most_common(n) 
统计出现最多次数的n个元素

print(a.most_common(3))
 # 结果
 [('l', 5), ('o', 4), ('h', 3)] 出现次数最多的三个元素

4.update (类似集合的update,进行更新)
a.update("hello123121")
print(a)

5.subtract (类似update,做减法)
s1 = "abcd"
s2 = "cdef"
a1 = Counter(s1)
a2 = Counter(s2)
a1.subtract(a2)
print(a1)
# 结果: 
Counter({'a': 1, 'b': 1, 'c': 0, 'd': 0, 'e': -1, 'f': -1})

6. iteritems() (同字典的items(),返回迭代器)
7. iterkeys() (同字典的keys(),返回迭代器)
8. itervalues() (同字典的values(),返回迭代器)

--------------------------------------------------
ord()函数： 以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，
            如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。
是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数

ord(c)
返回值是对应的十进制整数。
---------------------------------------------------------------------------

位运算
运算符	                描述	                                                                                   实例
&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	                            (a & b) 输出结果 12 ，二进制解释： 0000 1100
|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1	                                            (a | b) 输出结果 61 ，二进制解释： 0011 1101
^	按位异或运算符：当两对应的二进位相异时，结果为1	                                                    (a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1	                                         (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
<<	左移动运算符：运算数的各二进位全部左移若干位，由”<<”右边的数指定移动的位数，高位丢弃，低位补0	           a << 2 输出结果 240 ，二进制解释： 1111 0000
>>	右移动运算符：把”>>”左边的运算数的各二进位全部右移若干位，”>>”右边的数指定移动的位数	                    a >> 2 输出结果 15 ，二进制解释： 0000 1111

-----------------------------------------------------------------------------

数据结构--哈希表hash
哈希冲突是无法避免的
Hash算法（散列算法），是将一个不定长的输入，通过散列函数变换成一个定长的输出，即散列值。
它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数就是hash函数，存放记录的数组叫做哈希表。
1.自定义哈希函数
自定义哈希函数通常可利用除留余数、移位、循环哈希、平方取中等方法。

2.内置hash()函数
返回一个对象（数字、字符串，不能直接用于 list、set、dictionary）的哈希值

相同字符串在同一次运行时的哈希值是相同的，但是不同次运行的哈希值不同。这是由于Python的字符串hash算法有一个启动时随机生成secret prefix/suffix的机制，存在随机化现象：对同一个字符串输入，不同解释器进程得到的hash结果可能不同。因此当需要做可重现可跨进程保持一致性的hash，需要用到hashlib模块。

3.hsahlib模块
hashlib提供了常见的摘要算法，如MD5，SHA1等等。示例代码如下：

# coding:utf-8
# 使用hashlib模块

import hashlib
md5 = hashlib.md5()     # 应用MD5算法
data = "hello world"
md5.update(data.encode('utf-8'))
print(md5.hexdigest())

---------------------------------------------------------

十进制转二进制
bin(x)
oct(x)
	   2进制	             8进制	        10进制	             16进制
2进制	  -	              bin(int(x, 8))	bin(int(x, 10))	   bin(int(x, 16))
8进制	 oct(int(x, 2))	 	 -	        oct(int(x, 10))	   oct(int(x, 16))
10进制 	int(x, 2)	      int(x, 8)	        -	            int(x, 16)
16进制 	hex(int(x, 2))	      hex(int(x, 8))	hex(int(x, 10))	    -

bin()、oct()、hex()的返回值均为字符串，且分别带有0b、0o、0x前缀。

-----------------------------------------

行列式的计算公式为 $\begin{vmatrix}a&amp;b\\c&amp;d\end{vmatrix}=ad-bc$。

----------------------------------------------

.values()

-----------------------------------------------
0xaaaaaaaa = 10101010101010101010101010101010 (偶数位为1，奇数位为0）

0x55555555 = 1010101010101010101010101010101 (偶数位为0，奇数位为1）

0x33333333 = 110011001100110011001100110011 (1和0每隔两位交替出现)

0xcccccccc = 11001100110011001100110011001100 (0和1每隔两位交替出现)

0x0f0f0f0f = 00001111000011110000111100001111 (1和0每隔四位交替出现)

0xf0f0f0f0 = 11110000111100001111000011110000 (0和1每隔四位交替出现)



--------------------------------------------------------
正则表达式
https://www.runoob.com/regexp/regexp-syntax.html
https://www.cnblogs.com/shangdawei/p/3160367.html

import re
re.fullmatch()
re.match()
import re
s1='abcabccba'
a=re.match(r'([a-z]+)\1+',s1)
print(a)
print(a.group())
print('\n')

s2='abcabcabc'
b=re.match(r'([a-z]+)\1+',s2)
print(b)
print(b.group())
print('\n')

c=re.fullmatch(r'([a-z]+)\1+',s1)
print(c)
print('\n')

d=re.fullmatch(r'([a-z]+)\1+',s2)
print(d)
print(d.group())
----------------------------------------------------------
栈

class Stack(object):
  # 初始化栈为空列表
  def __init__(self):
    self.items = []
  # 判断栈是否为空，返回布尔值
  def is_empty(self):
    return self.items == []
  # 返回栈顶元素
  def peek(self):
    return self.items[len(self.items) - 1]
  # 返回栈的大小
  def size(self):
    return len(self.items)
  # 把新的元素堆进栈里面（程序员喜欢把这个过程叫做压栈，入栈，进栈……）
  def push(self, item):
    self.items.append(item)
  # 把栈顶元素丢出去（程序员喜欢把这个过程叫做出栈……）
  def pop(self, item):
    return self.items.pop()
if __name__ == __main__:
  # 初始化一个栈对象
  my_stack = Stack()
  # 把'h'丢进栈里
  my_stack.push('h')
  # 把'a'丢进栈里
  my_stack.push('a')
  # 看一下栈的大小（有几个元素）
  print my_stack.size()
  # 打印栈顶元素
  print my_stack.peek()
  # 把栈顶元素丢出去，并打印出来
  print my_stack.pop()
  # 再看一下栈顶元素是谁
  print my_stack.peek()
  # 这个时候栈的大小是多少？
  print my_stack.size()
  # 再丢一个栈顶元素
  print my_stack.pop()
  # 看一下栈的大小
  print my_stack.size
  # 栈是不是空了？
  print my_stack.is_empty()
  # 哇~真好吃~
  print 'Yummy~'
  -------------------------------------------------
  堆栈与队列
  1、python实现堆栈，可先将Stack类写入文件stack.py，在其它程序文件中使用from stack import Stack，然后就可以使用堆栈了。

stack.py的程序:
复制代码代码如下:
class Stack(): 
    def __init__(self,size): 
        self.size=size; 
        self.stack=[]; 
        self.top=-1; 
    def push(self,ele):  #入栈之前检查栈是否已满 
        if self.isfull(): 
            raise exception("out of range"); 
        else: 
            self.stack.append(ele); 
            self.top=self.top+1; 
    def pop(self):             # 出栈之前检查栈是否为空 
        if self.isempty(): 
            raise exception("stack is empty"); 
        else: 
            self.top=self.top-1; 
            return self.stack.pop(); 
     
    def isfull(self): 
        return self.top+1==self.size; 
    def isempty(self): 
        return self.top==-1;

 
再写一个程序文件，stacktest.py,使用栈，内容如下:
 
复制代码代码如下:
#!/usr/bin/python  
from stack import Stack 
s=Stack(20); 
for i in range(3): 
    s.push(i); 
s.pop() 
print s.isempty();

2、python 实现队列:
复制代码代码如下:
class Queue(): 
    def __init__(self,size): 
        self.size=size; 
        self.front=-1; 
        self.rear=-1; 
        self.queue=[]; 
    def enqueue(self,ele):  #入队操作 
        if self.isfull(): 
            raise exception("queue is full"); 
        else: 
            self.queue.append(ele); 
            self.rear=self.rear+1; 
    def dequeue(self):      #出队操作 
        if self.isempty(): 
            raise exception("queue is empty"); 
        else: 
            self.front=self.front+1; 
            return self.queue[self.front]; 
    def isfull(self): 
        return self.rear-self.front+1==self.size; 
    def isempty(self): 
        return self.front==self.rear; 
     
q=Queue(10); 
for i in range(3): 
    q.enqueue(i); 
print q.dequeue(); 
print q.isempty();
  

